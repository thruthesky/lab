import 'ip_lib.dart'; // Import the library

/**
 * 구글 문서: https://docs.google.com/document/d/1Ljw6b2Hiq7d43gGD-7dP_iEKhGGyCVh7zviEs4vwg4Y/edit?tab=t.0#heading=h.vnv2wsamhklp 참고
 * 리눅스에서 Firewall-CMD 명령어로 불량한 IP 주소 차단을 위한, IP 주소 및 서브넷 차단 스크립트입니다.
 * IP 주소는 점(.)으로 구분하여 4개의 숫자로 구성됩니다.
 * 이 숫사 형식을 A.B.C.D 라고 표현을 하며,
 * 처음 A 와 B 두 개의 숫자를 그룹하는 B 클래스라고 하겠습니다. 예를 들면, 1.2.x.x 의 경우 B 클래스입니다. 이 때 x 는 0~255 까지의 숫자입니다.
 * 처음 A, B, C 세 개의 수자 그룹을 C 클래스라고 하겠습니다. 예를 들면, 1.2.3.x 의 경우 C 클래스입니다. 이 때 x 는 0~255 까지의 숫자입니다.
 * 
 * 이 스크립트가 IP 주소를 분석하여 C 클래스 단위에서 중복되는 IP 주소를 찾아서 `print("firewall-cmd --permanent --add-rich-rule=\"rule family='ipv4' source address='$subnet.0/24' reject\"",);`와 같이 차단할 수 있는 명령어를 화면에 출력합니다.
 * 만약, 맨 앞의 A.B.x.x 부분과 같이 IP 주소의 B 클래스가 2 개 이상 중복이 존재하면, B 클래스 단위로 차단을 하도록 합니다. 만약, 중복이 없는 IP 주소와 C 클래스에서, 앞의 A.B.x.x 와 같이 중복이 된다면, B 클래스 단위로 변경 해 주세요. B 클래스 단위는 `print("firewall-cmd --permanent --add-rich-rule=\"rule family='ipv4' source address='$subnet.0.0/16' reject\"");` 와 같이 화면에 출력합니다.
 * 만약, IP 주소가 C 클래스 또는 B 클래스에서 중복되는 것이 없다면, `print("firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=$ip reject'");` 와 같이 IP 단위로 차단을 하도록 합니다.
 * 
 * 예를 들어, 아래와 같은 IP 주소 목록이 `ips` 변수에 저장되어 있다고 가정합니다.
 * 
 * 1.2.3.4
 * 1.2.3.5
 * 2.3.4.5
 * 2.3.8.9
 * 2.3.9.9
 * 8.8.8.8
 * 3.4.5.6
 * 3.4.5.7
 * 3.4.8.8
 * 
 * 와 같은 경우,
 * `1.2.3.4` 와 `1.2.3.5` 두개의 클래스가 1.2.3.x 와 같이 C 클래스에서 2개가 중복이 되므로, `print("firewall-cmd --permanent --add-rich-rule=\"rule family='ipv4' source address='$subnet.0/24' reject\"",);` 와 같이 차단을 하도록 합니다.
 * `2.3.4.5`, `2.3.8.9`, `2.3.9.9` 와 같은 경우, C 클래스에서 중복되는 것이 없지만, `2.3.x.x` 와 같이 B 클래스에서 이 세개가 모두 중복되므로 `print("firewall-cmd --permanent --add-rich-rule=\"rule family='ipv4' source address='$subnet.0.0/16' reject\"");` 와 같이 차단을 하도록 합니다.
 * `8.8.8.8` 의 경우, C 클래스나 B 클래스에서 중복이 없기 때문에 IP 단위로 차단을 합니다.
 * `3.4.5.6` 과 `3.4.5.7` 은 C 클래스에서 중복되어 3.4.5.0 으로 서브넷을 구성합니다. 그리고 `3.4.8.8.` 은 `3.4.5.0` 과 C 클래스에서 중복되지는 않지만, B 클래스에서 중복됩니다. 그래서 두 둘을 `3.4.0.0` 과 같이 B 클래스로 묶어서 서브넷을 구성하여 차단 명령어를 출력합니다.
 * 
 * 명령어 출력 순서:
 * - B 클래스 단위 차단이 먼저 출력
 * - C 클래스 단위 차단이 그 다음에 출력
 * - 개별 IP 단위 차단이 마지막에 출력
 * 
 * 최악의 경우:
 * - B 단위로 차단 함. IP 주소의 A.B.x.x 부분이 2개 이상 중복이 존재하면, B 클래스 단위로 차단을 한다.
 */
void main() {
  String ips = '''
144.76.32.151
37.27.51.145
154.221.29.227
172.183.148.243
20.125.163.80
20.15.133.160
20.15.133.162
20.15.133.164
65.55.210.29
65.55.210.69
65.55.210.72
65.55.210.99
216.244.66.198
110.243.86.3
110.52.181.160
110.82.77.218
111.12.234.185
111.25.194.21
111.25.194.64
111.27.110.99
111.27.36.17
111.29.114.109
111.52.94.206
111.60.135.173
112.0.103.236
112.12.163.204
112.123.15.191
112.39.152.208
112.39.231.69
112.39.236.46
112.40.201.227
112.41.184.108
112.51.215.162
112.64.69.88
112.8.222.10
113.0.182.251
113.138.243.106
113.2.101.161
113.221.58.187
113.221.59.75
113.240.145.76
114.139.93.93
115.201.61.167
117.139.66.56
117.154.8.64
117.167.1.74
117.170.97.57
117.23.190.94
117.36.132.133
117.41.15.173
117.61.17.168
119.53.45.4
119.99.152.167
120.242.191.126
120.243.225.153
120.43.111.88
120.4.37.203
122.191.225.179
123.116.247.45
123.139.39.179
123.144.207.16
123.152.175.200
123.170.74.85
123.173.26.244
123.180.18.47
125.40.43.5
125.76.52.95
1.26.127.56
139.170.71.216
139.170.96.71
140.250.215.76
14.205.89.212
144.76.184.209
153.0.241.37
153.34.16.23
163.204.217.70
171.213.146.250
171.217.41.78
171.34.217.83
175.22.70.129
180.121.216.70
180.130.69.189
182.108.122.219
182.136.92.112
182.98.252.32
183.141.114.123
183.197.224.233
183.197.247.244
183.198.170.100
183.200.2.215
183.209.198.168
183.221.47.160
183.222.93.56
183.223.167.42
183.225.142.86
183.92.126.209
220.167.215.206
221.14.205.243
221.206.207.76
221.213.33.176
222.136.246.192
222.172.229.207
222.242.255.87
222.88.229.37
222.90.114.235
223.102.174.101
223.107.63.2
223.113.157.137
223.114.172.60
223.198.130.172
223.64.103.189
223.73.59.34
223.91.204.104
223.94.52.151
27.211.22.147
36.142.36.96
36.142.40.60
36.142.43.22
36.142.63.174
36.153.55.183
36.161.128.40
39.130.71.226
39.149.149.138
39.151.130.195
39.155.43.4
39.162.76.136
39.66.227.18
42.226.85.95
42.53.91.186
42.55.6.91
42.93.176.25
47.243.100.169
47.243.100.179
47.243.101.29
47.243.102.27
47.243.104.166
47.243.105.139
47.243.105.32
47.243.105.64
47.243.105.76
47.243.107.119
47.243.108.171
47.243.108.202
47.243.111.32
47.243.111.36
47.243.132.225
47.243.135.170
47.243.135.224
47.243.166.38
47.243.175.188
47.243.175.232
47.243.78.219
47.243.79.195
47.243.80.58
47.243.82.159
47.243.82.67
47.243.83.35
47.243.87.103
47.243.87.242
47.243.88.209
47.243.88.5
47.243.89.254
47.243.90.252
47.243.91.219
47.243.91.68
47.243.95.187
47.243.95.75
47.243.96.102
47.243.96.255
47.243.98.154
47.243.98.248
60.13.34.96
61.180.192.171
61.92.123.152
66.249.64.226
66.249.64.227
66.249.65.169
66.249.65.39
66.249.65.40
66.249.65.41
66.249.65.64
66.249.65.65
66.249.65.67
66.249.68.64
66.249.71.130
66.249.73.2
66.249.73.227
66.249.73.233
66.249.73.237
66.249.73.65
66.249.73.71
66.249.73.72
66.249.73.73
66.249.74.160
66.249.74.169
66.249.74.41
66.249.74.42
66.249.74.43
66.249.74.70
66.249.74.71
66.249.74.72
66.249.74.73
66.249.74.74
66.249.75.134
8.210.107.227
8.210.109.229
8.210.119.63
8.210.147.121
8.210.149.0
8.210.153.23
8.210.160.238
8.210.163.104
8.210.172.239
8.210.176.30
8.210.178.145
8.210.180.141
8.210.180.4
8.210.181.176
8.210.39.10
8.210.42.86
8.210.43.144
8.210.44.141
8.210.46.11
8.210.48.235
8.210.51.20
8.210.63.232
8.210.64.174
8.210.79.83
8.210.99.36
8.217.133.43
8.217.139.32
8.217.146.13
8.217.156.199
8.217.157.123
8.217.157.177
8.217.158.207
8.217.162.124
8.217.165.237
8.217.166.191
8.217.166.29
8.217.168.144
8.217.168.224
8.217.176.61
8.217.177.13
8.217.179.180
8.217.180.49
8.217.181.0
8.217.181.58
8.217.181.98
8.217.182.94
8.217.186.117
8.217.188.167
8.217.188.66
8.217.189.198
8.217.190.110
8.217.190.142
8.217.190.93
8.217.191.210
8.217.206.103
8.217.208.126
8.217.208.183
8.217.208.198
8.217.208.23
8.217.208.28
8.217.208.35
8.217.208.41
8.217.208.54
8.217.209.113
8.217.209.125
8.217.209.129
8.217.209.143
8.217.209.157
8.217.209.178
8.217.209.210
8.217.209.23
8.217.210.109
8.217.210.129
8.217.210.223
8.217.210.225
8.217.210.226
8.217.210.248
8.217.211.106
8.217.211.127
8.217.211.133
8.217.211.142
8.217.211.159
8.217.211.163
8.217.211.183
8.217.211.241
8.217.211.31
8.217.211.42
8.217.211.59
8.217.211.6
8.217.211.60
8.217.211.82
8.217.212.110
8.217.212.165
8.217.212.194
8.217.212.2
8.217.212.64
8.217.212.67
8.217.212.79
8.217.213.0
8.217.213.110
8.217.213.114
8.217.213.123
8.217.213.125
8.217.213.185
8.217.213.197
8.217.213.220
8.217.213.252
8.217.213.41
8.217.213.76
8.217.213.80
8.217.213.94
8.217.214.117
8.217.214.173
8.217.214.186
8.217.214.193
8.217.214.237
8.217.46.191
110.243.86.3
110.52.181.160
110.82.77.218
111.12.234.185
111.25.194.21
111.25.194.64
111.27.110.99
111.27.36.17
111.29.114.109
111.52.94.206
111.60.135.173
112.0.103.236
112.12.163.204
112.123.15.191
112.39.152.208
112.39.231.69
112.39.236.46
112.40.201.227
112.41.184.108
112.51.215.162
112.64.69.88
112.8.222.10
113.0.182.251
113.138.243.106
113.2.101.161
113.221.58.187
113.221.59.75
113.240.145.76
114.139.93.93
115.201.61.167
117.139.66.56
117.154.8.64
117.167.1.74
117.170.97.57
117.23.190.94
117.36.132.133
117.41.15.173
117.61.17.168
119.53.45.4
119.99.152.167
120.242.191.126
120.243.225.153
120.43.111.88
120.4.37.203
122.191.225.179
123.116.247.45
123.139.39.179
123.144.207.16
123.152.175.200
123.170.74.85
123.173.26.244
123.180.18.47
125.40.43.5
125.76.52.95
1.26.127.56
139.170.71.216
139.170.96.71
140.250.215.76
14.205.89.212
144.76.184.209
153.0.241.37
153.34.16.23
163.204.217.70
171.213.146.250
171.217.41.78
171.34.217.83
175.22.70.129
180.121.216.70
180.130.69.189
182.108.122.219
182.136.92.112
182.98.252.32
183.141.114.123
183.197.224.233
183.197.247.244
183.198.170.100
183.200.2.215
183.209.198.168
183.221.47.160
183.222.93.56
183.223.167.42
183.225.142.86
183.92.126.209
220.167.215.206
221.14.205.243
221.206.207.76
221.213.33.176
222.136.246.192
222.172.229.207
222.242.255.87
222.88.229.37
222.90.114.235
223.102.174.101
223.107.63.2
223.113.157.137
223.114.172.60
223.198.130.172
223.64.103.189
223.73.59.34
223.91.204.104
223.94.52.151
27.211.22.147
36.142.36.96
36.142.40.60
36.142.43.22
36.142.63.174
36.153.55.183
36.161.128.40
39.130.71.226
39.149.149.138
39.151.130.195
39.155.43.4
39.162.76.136
39.66.227.18
42.226.85.95
42.53.91.186
42.55.6.91
42.93.176.25
47.243.100.169
47.243.100.179
47.243.101.29
47.243.102.27
47.243.104.166
47.243.105.139
47.243.105.32
47.243.105.64
47.243.105.76
47.243.107.119
47.243.108.171
47.243.108.202
47.243.111.32
47.243.111.36
47.243.132.225
47.243.135.170
47.243.135.224
47.243.166.38
47.243.175.188
47.243.175.232
47.243.78.219
47.243.79.195
47.243.80.58
47.243.82.159
47.243.82.67
47.243.83.35
47.243.87.103
47.243.87.242
47.243.88.209
47.243.88.5
47.243.89.254
47.243.90.252
47.243.91.219
47.243.91.68
47.243.95.187
47.243.95.75
47.243.96.102
47.243.96.255
47.243.98.154
47.243.98.248
60.13.34.96
61.180.192.171
61.92.123.152
66.249.64.226
66.249.64.227
66.249.65.169
66.249.65.39
66.249.65.40
66.249.65.41
66.249.65.64
66.249.65.65
66.249.65.67
66.249.68.64
66.249.71.130
66.249.73.2
66.249.73.227
66.249.73.233
66.249.73.237
66.249.73.65
66.249.73.71
66.249.73.72
66.249.73.73
66.249.74.160
66.249.74.169
66.249.74.41
66.249.74.42
66.249.74.43
66.249.74.70
66.249.74.71
66.249.74.72
66.249.74.73
66.249.74.74
66.249.75.134
8.210.107.227
8.210.109.229
8.210.119.63
8.210.147.121
8.210.149.0
8.210.153.23
8.210.160.238
8.210.163.104
8.210.172.239
8.210.176.30
8.210.178.145
8.210.180.141
8.210.180.4
8.210.181.176
8.210.39.10
8.210.42.86
8.210.43.144
8.210.44.141
8.210.46.11
8.210.48.235
8.210.51.20
8.210.63.232
8.210.64.174
8.210.79.83
8.210.99.36
8.217.133.43
8.217.139.32
8.217.146.13
8.217.156.199
8.217.157.123
8.217.157.177
8.217.158.207
8.217.162.124
8.217.165.237
8.217.166.191
8.217.166.29
8.217.168.144
8.217.168.224
8.217.176.61
8.217.177.13
8.217.179.180
8.217.180.49
8.217.181.0
8.217.181.58
8.217.181.98
8.217.182.94
8.217.186.117
8.217.188.167
8.217.188.66
8.217.189.198
8.217.190.110
8.217.190.142
8.217.190.93
8.217.191.210
8.217.206.103
8.217.208.126
8.217.208.183
8.217.208.198
8.217.208.23
8.217.208.28
8.217.208.35
8.217.208.41
8.217.208.54
8.217.209.113
8.217.209.125
8.217.209.129
8.217.209.143
8.217.209.157
8.217.209.178
8.217.209.210
8.217.209.23
8.217.210.109
8.217.210.129
8.217.210.223
8.217.210.225
8.217.210.226
8.217.210.248
8.217.211.106
8.217.211.127
8.217.211.133
8.217.211.142
8.217.211.159
8.217.211.163
8.217.211.183
8.217.211.241
8.217.211.31
8.217.211.42
8.217.211.59
8.217.211.6
8.217.211.60
8.217.211.82
8.217.212.110
8.217.212.165
8.217.212.194
8.217.212.2
8.217.212.64
8.217.212.67
8.217.212.79
8.217.213.0
8.217.213.110
8.217.213.114
8.217.213.123
8.217.213.125
8.217.213.185
8.217.213.197
8.217.213.220
8.217.213.252
8.217.213.41
8.217.213.76
8.217.213.80
8.217.213.94
8.217.214.117
8.217.214.173
8.217.214.186
8.217.214.193
8.217.214.237
8.217.46.191
'''; // Example IPs from the problem description

  // IP 주소를 라인 별로 분리하고, 빈 라인을 제거하고, 중복을 제거한 후 정렬합니다.
  // 이 부분은 generateFirewalldBlockCommands 함수 내부로 이동했습니다.
  List<String> ipList =
      ips.split('\n').where((element) => element.isNotEmpty).toSet().toList();
  ipList.sort();
  print("전체 IP 주소 (고유, 정렬): ${ipList.length}");

  // Generate firewalld commands
  List<String> firewallCommands = generateFirewalldBlockCommands(ips);

  // Generate UFW commands
  List<String> ufwCommands = generateUfwBlockCommands(ips);

  // Print firewalld commands
  print("\n=== Firewalld 명령어 ===");
  if (firewallCommands.isNotEmpty) {
    for (String command in firewallCommands) {
      print(command);
    }
    print("firewall-cmd --reload");
  } else {
    print("차단할 IP가 없습니다.");
  }

  // Print UFW commands
  print("\n=== UFW 명령어 ===");
  if (ufwCommands.isNotEmpty) {
    for (String command in ufwCommands) {
      print(command);
    }
    print("ufw reload");
  } else {
    print("차단할 IP가 없습니다.");
  }
}
