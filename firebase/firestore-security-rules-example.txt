rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    /// FlutterFlow rules
    match /chat_messages/{document} {
      allow read: if true;
      allow write: if true;
    }

    match /chats/{document} {
      allow read: if true;
      allow write: if true;
    }
    
    
    
    
    // ------------------- Withcenter School Specific Rules ----------------------
    // 
    
  	// AI, chatbot used by momcafe.
    match /ai/{uid} {
    	allow read, write:if (request.auth.uid == uid);
      
    	match /chatbot/{documentId} {
      	allow read, write:if true;
      }
      
    	match /homework/{documentId} {
      	allow read, write:if true;
      }
    }
    
    
    // Puzzle Game Score
  	match /puzzle-score/{uid} {
      allow read,write: if true;
    }
    
    
    // Settings
    match /settings {
      match /puzzle {
        allow read,write: if true;
      }
    }

    // 
    // ------------------- Until Here -------------------
    
        
    
    // CHAT SETTINGS
    match /chat-settings/{uid} {
      allow read: if true;
      allow write: if true;
    }
    
    
    // The public information of the user.
    // Warning: This is a public document. Do not store sensitive information like
    // email, phone number, address, card number, license number, etc.
    match /users/{uid} {
      allow read: if true;
      allow write: if true;
//       allow read: if true;
//       allow create: if (request.auth.uid == uid) && notUpdating(['admin']);
//       allow update: if (request.auth.uid == uid) && notUpdating(['admin']);
//       allow delete: if (request.auth.uid == uid);

      
//       // The private information of the user.
//       // Save sensitive information here like email, phone number.
//       match /user_meta/private {
//         allow read: if request.auth.uid == uid;
//         allow create: if (request.auth.uid == uid);
//         allow update: if (request.auth.uid == uid);
//         allow delete: if false;
//       }

//       // The settings of the user.
//       match /user_meta/settings {
//         allow read: if true;
//         allow create: if (request.auth.uid == uid);
//         allow update: if (request.auth.uid == uid);
//         allow delete: if false;
//       }
      
//       match /user-meta/blocks {
//         allow read, write: if request.auth.uid == uid;
//       }
    }
    
    // EasyChat Rules ------------------------------------
    
    match /chat-rooms/{roomId} {
      function willBeSingle() {
        return request.resource.data.keys().hasAny(["single"]) 
                && request.resource.data.single == true;
      }
      function willBeAtMostOne(field) {
        return !request.resource.data.keys().hasAny([field])
          || (
            request.resource.data.keys().hasAny([field])
            && request.resource.data[field].size() <= 1
          );
      }
      function willBeOnlyMaster() {
        return request.resource.data.masterUsers.hasOnly([request.auth.uid]);
      }
      function willBeOnlyMember() {
        return request.resource.data.users.keys().hasOnly([request.auth.uid]);
      }

      function sameOrRemovingMembers() {
        return request.resource.data.users.keys().hasOnly(resource.data.users.keys());
      }
      function isMember() {
        return resource.data.keys().hasAll(['users']) 
                && request.auth.uid in resource.data.users.keys();
      }
      function isMaster() {
        return resource.data.keys().hasAll(['masterUsers']) 
                && request.auth.uid in resource.data.masterUsers;
      }
      function willBeMember() {
        return request.auth.uid in request.resource.data.users.keys();
      }
      function isJoining() {
        return !isMember() && willBeMember() && onlyAddingOneMember();
      }
      function isLeaving() {
        return !willBeMember() && isMember() && onlyRemovingOneMember();
      }
      function isOpenGroup() {
        return resource.data.keys().hasAll([ 'open']) 
                && resource.data.open == true;
      }
      function isSingleChat() {
        return 'single' in resource.data.keys()
                && resource.data.single;
      }
      function isInvited() {
        return  resource.data.keys().hasAll(['invitedUsers']) 
                && request.auth.uid in resource.data.invitedUsers;
      }
      function willBeRejectedUser() {
        return request.resource.data.keys().hasAny(['rejectedUsers'])
                && request.auth.uid in request.resource.data.rejectedUsers;
      }
      function isRejectedUser() {
        return resource.data.keys().hasAny(['rejectedUsers'])
          && request.auth.uid in resource.data.rejectedUsers;
      }
      function isRejecting() {
        return isInvited()
                && willBeRejectedUser()
                && !isRejectedUser();
      }
      function notUpdating(fields) {
        return resource == null 
          ? !request.resource.data.keys().hasAny(fields)
          : !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
      }
      function onlyAddingOneMember() {
        return resource.data.users.keys().toSet().intersection(request.resource.data.users.keys().toSet()) == resource.data.users.keys().toSet()
          && request.resource.data.users.keys().toSet().difference(resource.data.users.keys().toSet()).size() == 1;
      }
      function onlyRemovingOneMember() {
        return request.resource.data.users.keys().toSet().intersection(resource.data.users.keys().toSet()) == request.resource.data.users.keys().toSet()
                && resource.data.users.keys().toSet().difference(request.resource.data.users.keys().toSet()).size() == 1;
      }
      function sameMembers() {
        return request.resource.data.users.keys().toSet().intersection(resource.data.users.keys().toSet()) == request.resource.data.users.keys().toSet()
                && resource.data.users.keys().toSet().difference(request.resource.data.users.keys().toSet()).size() == 0;
      }
      function onlyUpdating(fields) {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
      }

      // function hasOrderField() {
      //   return 
      //     'users' in resource.data.keys() &&
      //   request.auth.uid in resource.data['users'].keys();
      //   // && 'o' in resource.data.users[request.auth.uid];
      // }
      // Chat Room Rules
      // allow read: if isMember() || isMaster() || isInvited() || isRejectedUser() || isOpenGroup();
      // allow create: if willBeOnlyMember() 
      //                 && willBeOnlyMaster()
      //                 && (
      //                   !willBeSingle()
      //                   || (willBeSingle() && willBeAtMostOne('invitedUsers'))
      //                 );
      // allow update: if 
      //   (
      //     isMaster()
      //     && sameOrRemovingMembers()
      //     && (
      //       !isSingleChat()
      //       || (isSingleChat() && notUpdating(['invitedUsers','single']))
      //     )
      //   )
      //   || (
      //     isJoining()
      //     && (isOpenGroup() || isInvited() || isRejectedUser())
      //   )
      //   || isLeaving()
      //   || isRejecting()
      //   || (
      //     isMember()
      //     && onlyUpdating(['lastMessageText', 'lastMessageAt', 'lastMessageUid', 'lastMessageUrl', 'lastMessageId', 'lastMessageDeleted', 'users'])
      //     && sameMembers()
      //   );
      allow read: if true;
      allow create: if true;
      allow update: if true;
        allow delete: if isMaster();
    }
    
    // End of EasyChat Rules -----------------------------
    
    match /user-phone-sign-in-numbers/{id} {
      allow get: if true;
      allow list: if false;
      allow write: if true;
    }
    
    match /likes/{likeId} {
      allow read, write: if true;
    }
    

    
    match /posts/{postId} {
      allow read: if true;
      allow create: if willBeMyDoc();
      allow update: if
        ( willBeMyDoc() && isMyDoc() )
        ||
        onlyUpdating(['commentCount', 'likeCount']);
    }
    
    match /comments/{commentId} {
      allow read: if true;
      allow create: if willBeMyDoc();
      allow update: if willBeMyDoc() && isMyDoc();
    }
   
    match /tasks/{taskId} {
      allow read: if isMyField('creator');
      allow create: if willBeMyField('creator');
      allow update: if isMyField('creator');
    }

    //
    match /reports/{reportId} {
      allow read, write: if willBeMyField('reporter') || isMyField('reporter');
    }
    // temporary rules test
    match /temp/{doc} {
      allow read: if false;
      allow create: if willBeMyDoc();
      allow update: if isMyDoc() || willBeMyDoc()
          && notUpdating(['uid'])
          && mustUpdating(['name'])
          && onlyAddingOneElement('users')
          && notRemoving('users', 'a')
          && onlyRemoving('users', 'a')
          && fieldCheck(['required', 'fields'], ['optional', 'fields'])
          ;
      allow delete: if false;
    }
  // EO of Rules
  }
}


// example: fieldCheck(['required', 'fields'], ['optional', 'fields'])
function fieldCheck(requires, optional) {
  let all = requires.concat( optional );
  // let fC = debug('****** fieldCheck *****');
  return required( requires ) && request.resource.data.keys().hasOnly(all);
}

// * Warning : It's check the fields after save.
// * Warning : !!! It's not checking the incoming data fields !!!
function required(fields) {
  // let d = debug('**** required ****');
  // let e = debug(request.resource.data);
  return request.resource.data.keys().hasAll( fields );
}



// Check if the uid of the document matches to the loign user's uid.
//
function isMyDoc() {
   return isMyField('uid');
}

// Check if the field matches to the login user's uid
//
// Use this to see if the document belongs to the user.
//
// For instance, if your uid is 'aaa' and the document data is `{authorUid: 'aaa', ...}`,
//  - you can call `isMyField('authorUid')`,
//  - And if the authorUid is your uid, then it passes.
//
// Normally you would use like `isMyDoc()` to check if the document
// belongs to the user. And this only works if the docuemnt field has 'uid'
// If the document has some other field instead of 'uid', use this function.
function isMyField(field) {
   return resource.data[field] == request.auth.uid;
}



// Check if the field matches to the user uid
//
// [field] must match the user uid.
// Use this to see if the document belongs to the user after save.
function willBeMyDoc() {
   return willBeMyField('uid');
}
function willBeMyField(field) {
   return request.resource.data[field] == request.auth.uid;
}



// Check if the [fields] does not change.
//
// Use this to block chainging on the properties in [fields].
// ```
// allow update: if notUpdating(['a', 'b', 'c']);
// ```
// Fields that are not in the `fields` parameters may change.
//
// 문서의 특정 필드들(fields)은 변경되지 않도록 한다.
//
// 변경이 안되면 true, 변경이 되면, false 를 리턴.
function notUpdating(fields) {
  // 저장되어져 있는 데이터가 없으면, 즉 생성인 경우,
  return resource == null 
    // 생성될 문서에 변경 금지된 필드들(fields)이 없으면, true 를 리턴.
    ? !request.resource.data.keys().hasAny(fields)
    // 이미 생성된 문서가 있는 경우, 변경 금지 필드들(fields)이 변경안되면 true 를 리턴.
    : !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
}


// 함수
//
// 입력된 fields 중 한 개라도 업데이트되면 true 리턴
//
// 예, 입력 fields 가 ['A', 'B'] 이고, 업데이트된 필드가 ['A', 'C'] 이면 true 리턴. A 겹침
// 예, 입력 fields 가 ['A', 'B'] 이고, 업데이트된 필드가 ['C', 'D'] 이면 false 리턴. 겹침 없음.
// Example:
// ```
// allow update: if onlyUpdating(['a', 'b']);
// ```
function onlyUpdating(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
}






// The value of [fields] must be changed.
// Chaging other properties rather than [fields] is fine.
function mustUpdating(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields);
}


// Adding an element to the array field.
//
// This must add an elemnt only. Not replacing any other element. It does unique element check.
//
// 배열에 요소를 1개만 추가
// 문서의 여러 필드 중 하나의 배열 필드에 1개의 요소만 추가하는 경우.
// 다른 필드는 건드리지 않으며, 해당 필드에 무엇이든 요소가 하나만 추가하면 된다.
// 예를 들어, 채팅방에서 누군가를 초대할 때, 초대한 사람의 uid 를 배열에 추가하는 경우등에 사용하면 된다.
function onlyAddingOneElement(arrayField) {
  return
    resource.data[arrayField].toSet().intersection(request.resource.data[arrayField].toSet()) == resource.data[arrayField].toSet()
    &&
    request.resource.data[arrayField].toSet().difference(resource.data[arrayField].toSet()).size() == 1
  ;
}


// Return true if the array field in the document is not removing the element.
//
// Usage: notRemoving('users', resource.data.master) - for blocking moderator to remove master.

// 문서의 특정 배열 필드에서 특정 요소를 제거하지 않는 경우 참을 리턴한다.
// 예를 들어, 채팅방의 moderators 필드에 관리자와 여러명의 부 관리자가 있는 경우, 부 관리자가 관리자를 제거하지 못하게 할 때 등에서 사용한다.
// 즉, 문서의 여러 필드 중에서 [field] 에서 [element] 를 제거하지 못하도록 할 때 사용한다.
// 예) notRemoving('users', 'a') 와 같이 하면, users 필드에서 'a' 를 제거하는 쿼리를 하면 에러를 내도록 할 때 사용한다.
function notRemoving(field, element) {
  return request.resource.data[field].hasAny([element]);
}


// Return true if the array field in the document is removing only the the element. It must maintain other elements.
//
// arrayField is an array
// [element] is an element to be removed from the arrayField
//
// 문서의 특정 배열 필드에서 특정 요소를 제거하고, 다른 요소는 변경하지 않는 경우 참을 리턴한다.
// 예를 들면, 글의 좋아요 목록 필드에 UID 를 저장하는 경우, 나의 UID 만 뺄 수 있도록 허용하는 것이다.
function onlyRemoving(arryField, element) {
  return
    resource.data[arryField].toSet().difference(request.resource.data[arryField].toSet()) == [element].toSet() 
    &&
    resource.data[arryField].toSet().intersection(request.resource.data[arryField].toSet()) == request.resource.data[arryField].toSet()
  ;
}